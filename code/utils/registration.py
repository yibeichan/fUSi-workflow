import numpy as np
import nibabel as nib
from nibabel.orientations import aff2axcodes
import SimpleITK as sitk

def nifit_info(file):
    img = nib.load(file)
    data = img.get_fdata()

    return data.shape, img.affine, aff2axcodes(img.affine)

def get_transform_matrix(file1, file2): 
    affine1 = nib.load(file1).affine
    affine2 = nib.load(file2).affine

    return affine2 @ np.linalg.inv(affine1)

def correct4registration(infile1, infile2, outfile):
    """
    infile1: original image with time series
    infile2: one time point image exported from 3D slicer (no any operations)
    outfile: output image corrected for registration
    """
    mtx = get_transform_matrix(infile1, infile2)
    img = nib.load(infile1)
    data = img.get_fdata()
    affine = img.affine

    # Apply the first affine transformation
    transformed_affine = mtx @ affine

    # Correct for registration
    corrected_affine = transformed_affine.copy()
    corrected_affine[[0, 1]] = corrected_affine[[1, 0]]

    print("Corrected Affine:\n", corrected_affine)
    print(aff2axcodes(corrected_affine))

    # Reflect z to be positive
    reflect_transform = np.array([[1, 0, 0, 0],
                                  [0, 1, 0, 0],
                                  [0, 0, -1, 0],
                                  [0, 0, 0, 1]])

    transformed_affine = corrected_affine @ reflect_transform

    print("Transformed Affine after reflect:\n", transformed_affine)
    # Flip A/P (axis 0) and S/I (axis 2) to correct the orientation
    flipped_data = np.flip(np.flip(data, axis=0), axis=2)

    # Create the new image with the transformed affine matrix
    new_img = nib.Nifti1Image(flipped_data, transformed_affine, img.header)
    print(new_img.affine, aff2axcodes(new_img.affine))

    # Save the result
    nib.save(new_img, outfile)

    return new_img

def slice2chunk_align(ref_img_file, moving_img_file, transform_file, output_file):
    """
    this function aligns a moving image to a reference image equal to 3D slicer operation

    ref_img_file: reference image
    moving_img_file: image to align
    transform_file: transform file (generated by 3D slicer)
    output_file: output aligned image
    """
    reference_image = sitk.ReadImage(ref_img_file)
    image_to_align = sitk.ReadImage(moving_img_file)
    transform = sitk.ReadTransform(transform_file)

    resampler = sitk.ResampleImageFilter()
    resampler.SetReferenceImage(reference_image)
    resampler.SetInterpolator(sitk.sitkLinear)
    resampler.SetTransform(transform)
    resampled_image = resampler.Execute(image_to_align)

    sitk.WriteImage(resampled_image, output_file)